var searchIndex = {};
searchIndex["pupil"] = {"doc":"Arithmetic expression evaluator.","items":[[0,"env","pupil","Environment.",null,null],[3,"Env","pupil::env","The environment.",null,null],[4,"Error","","Things that can go wrong while evaluating.",null,null],[13,"ExpectOperator","","Expected an operator-like thing.",0,null],[13,"NaExpression","","Expected a value-like thing.",0,null],[13,"DisallowedUnary","","Disallowed unary operator.",0,null],[13,"InternalCorruption","","Something went wrong unexpectedly.",0,null],[13,"UnfinishedExpression","","Expression isn’t finished, cannot end with an operator.",0,null],[13,"InvalidToken","","Tokenization failed to lex a token.",0,null],[13,"UnbalancedParens","","Different number of `(` and `)`.",0,null],[13,"MisplacedComma","","Misplaced a comma token outside of a function application.",0,null],[13,"BadArgument","","Bad number of arguments.",0,null],[13,"UnknownSymbol","","A variable or function symbol wasn’t found.",0,null],[6,"Value","","Underlying type used for arithmetic.",null,null],[6,"BuiltinFn","","Signature for builtins.",null,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"new","","Create a new environment.",1,{"inputs":[],"output":{"name":"env"}}],[11,"init","","",1,null],[11,"find","","Find a builtin.",1,null],[11,"var","","Find a variable.",1,null],[11,"set_var","","Set a variable.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"env"}}],[0,"expr","pupil","Expressions.",null,null],[3,"Expr","pupil::expr","The expression context.",null,null],[11,"new","","Create a new expression and bind it to an environment.",2,{"inputs":[{"name":"env"}],"output":{"name":"expr"}}],[11,"parse","","Parse a token.",2,null],[11,"feed","","Feed new input to be parsed and evaluated.",2,null],[11,"result","","Finalize the expression and calculate the final result.",2,null],[11,"eval","","Convenience method combines `feed` and `result`.",2,null],[0,"lexer","pupil","Lexing.",null,null],[3,"TokenIterator","pupil::lexer","Iterator over tokens in a string.",null,null],[4,"Token","","Supported tokens types.",null,null],[13,"Unk","","Unknown token.",3,null],[13,"Lit","","Value literal token.",3,null],[13,"Op","","Operator token.",3,null],[13,"Var","","Variable token.",3,null],[13,"Open","","Function token.",3,null],[13,"Comma","","Comma token `,`.",3,null],[13,"Close","","Function closing token `)`.",3,null],[5,"tokenize","","Create a new TokenIterator for a string.",null,{"inputs":[{"name":"str"}],"output":{"name":"tokeniterator"}}],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"next","","",4,null],[0,"op","pupil","Operators.",null,null],[3,"OpDesc","pupil::op","Descriptor for an operator’s builtin, precedence, associativity and if available as unary operator.",null,null],[12,"pfn","","",5,null],[12,"pre","","",5,null],[12,"assoc","","",5,null],[12,"unary","","",5,null],[4,"Order","","Operator precedence.",null,null],[13,"FnBarrier","","Function barrier hack.",6,null],[13,"Operators","","Lowest precedence for operators, helper for `FnBarrier`.",6,null],[13,"AddSub","","Addition and subtraction precedence.",6,null],[13,"MulDiv","","Multiplication and division precedence.",6,null],[13,"IMul","","Implicit multiplication precedence.",6,null],[13,"Pow","","Exponentiation precedence.",6,null],[13,"PowRightAssoc","","Helper for `Pow`’s right associativity.",6,null],[13,"Unary","","Unary operator precedence.",6,null],[4,"Assoc","","Operator associativity.",null,null],[13,"Left","","Operator is left associative.",7,null],[13,"Right","","Operator is right associative.",7,null],[13,"None","","Operator has no associativity, unimplemented.",7,null],[4,"Operator","","Supported operator types.",null,null],[13,"Add","","`+`",8,null],[13,"Sub","","`-`",8,null],[13,"Mul","","`*`",8,null],[13,"Div","","`/`",8,null],[13,"Rem","","`%`",8,null],[13,"IMul","","Implicit multiplication.",8,null],[13,"Pow","","`^`",8,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"desc","","Get a descriptor for an operator.",8,null],[0,"builtins","pupil","Builtins.",null,null],[5,"builtin_id","pupil::builtins","",null,null],[5,"builtin_add","","",null,null],[5,"builtin_sub","","",null,null],[5,"builtin_mul","","",null,null],[5,"builtin_div","","",null,null],[5,"builtin_rem","","",null,null],[5,"builtin_pow","","",null,null],[5,"builtin_floor","","",null,null],[5,"builtin_ceil","","",null,null],[5,"builtin_round","","",null,null],[5,"builtin_abs","","",null,null],[5,"builtin_sqr","","",null,null],[5,"builtin_cube","","",null,null],[5,"builtin_sqrt","","",null,null],[5,"builtin_cbrt","","",null,null],[5,"builtin_min","","",null,null],[5,"builtin_max","","",null,null],[5,"builtin_exp","","",null,null],[5,"builtin_exp2","","",null,null],[5,"builtin_expm1","","",null,null],[5,"builtin_ln","","",null,null],[5,"builtin_log","","",null,null],[5,"builtin_log2","","",null,null],[5,"builtin_log10","","",null,null],[5,"builtin_ln1p","","",null,null],[5,"builtin_e","","",null,null],[5,"builtin_mean","","",null,null],[5,"builtin_median","","",null,null],[5,"builtin_range","","",null,null],[5,"builtin_var","","",null,null],[5,"builtin_stdev","","",null,null],[5,"builtin_deg","","",null,null],[5,"builtin_rad","","",null,null],[5,"builtin_pi","","",null,null],[5,"builtin_tau","","",null,null],[5,"builtin_sin","","",null,null],[5,"builtin_cos","","",null,null],[5,"builtin_tan","","",null,null],[5,"builtin_asin","","",null,null],[5,"builtin_acos","","",null,null],[5,"builtin_atan","","",null,null],[5,"builtin_atan2","","",null,null],[5,"builtin_sinh","","",null,null],[5,"builtin_cosh","","",null,null],[5,"builtin_tanh","","",null,null],[5,"builtin_asinh","","",null,null],[5,"builtin_acosh","","",null,null],[5,"builtin_atanh","","",null,null]],"paths":[[4,"Error"],[3,"Env"],[3,"Expr"],[4,"Token"],[3,"TokenIterator"],[3,"OpDesc"],[4,"Order"],[4,"Assoc"],[4,"Operator"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"stat","libc","",null,null],[12,"st_dev","","",0,null],[12,"st_ino","","",0,null],[12,"st_mode","","",0,null],[12,"st_nlink","","",0,null],[12,"st_uid","","",0,null],[12,"st_gid","","",0,null],[12,"st_rdev","","",0,null],[12,"st_size","","",0,null],[12,"st_atime","","",0,null],[12,"st_mtime","","",0,null],[12,"st_ctime","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"timezone","","",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"chmod","","",null,null],[5,"wchmod","","",null,null],[5,"mkdir","","",null,null],[5,"wrmdir","","",null,null],[5,"fstat","","",null,null],[5,"stat","","",null,null],[5,"wstat","","",null,null],[5,"wutime","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"wopen","","",null,null],[5,"creat","","",null,null],[5,"access","","",null,null],[5,"chdir","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"execvpe","","",null,null],[5,"getcwd","","",null,null],[5,"getpid","","",null,null],[5,"isatty","","",null,null],[5,"lseek","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"unlink","","",null,null],[5,"write","","",null,null],[5,"commit","","",null,null],[5,"get_osfhandle","","",null,null],[5,"open_osfhandle","","",null,null],[5,"setlocale","","",null,null],[5,"wsetlocale","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",4,null],[11,"is_none","","Returns `true` if the option is a `None` value",4,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",4,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",4,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",4,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",4,null],[11,"unwrap_or","","Returns the contained value or a default.",4,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",4,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",4,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",4,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",4,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",4,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",4,null],[11,"iter","","Returns an iterator over the possibly contained value.",4,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",4,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",4,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",4,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",4,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",4,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",4,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",4,null],[11,"unwrap_or_default","","Returns the contained value or a default",4,null],[11,"hash","core::num","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",5,null],[11,"cmp","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"shl","","",5,null],[11,"shl_assign","","",5,null],[11,"shr","","",5,null],[11,"shr_assign","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"rem","","",5,null],[11,"rem_assign","","",5,null],[11,"not","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,null],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,null],[11,"bitand_assign","","",5,null],[11,"neg","","",5,null],[11,"eq","core::num::dec2flt","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","core::num","",7,null],[11,"eq","","",7,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"hash","core::nonzero","",10,null],[11,"fmt","","",10,null],[11,"partial_cmp","","",10,null],[11,"lt","","",10,null],[11,"le","","",10,null],[11,"gt","","",10,null],[11,"ge","","",10,null],[11,"cmp","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",10,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",10,null],[11,"new","core::ptr","Creates a new `Unique`.",11,null],[11,"get","","Dereferences the content.",11,null],[11,"get_mut","","Mutably dereferences the content.",11,null],[11,"deref","","",11,null],[11,"fmt","","",11,null],[11,"new","","Creates a new `Shared`.",12,null],[11,"clone","","",12,null],[11,"deref","","",12,null],[11,"fmt","","",12,null],[11,"hash","core::marker","",13,null],[11,"eq","","",13,null],[11,"partial_cmp","","",13,null],[11,"cmp","","",13,null],[11,"clone","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"contains","","# Examples",15,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"contains","","# Examples",16,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"contains","","# Examples",17,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"from","","",18,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",18,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"contains","","# Examples",19,null],[11,"hash","core::cmp","",20,null],[11,"fmt","","",20,null],[11,"eq","","",20,null],[11,"clone","","",20,null],[11,"reverse","","Reverse the `Ordering`.",20,null],[11,"cmp","","",20,null],[11,"partial_cmp","","",20,null],[11,"fmt","libc","",21,null],[11,"fmt","","",21,null],[11,"is","","Returns true if the boxed type is the same as `T`",21,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",21,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",21,null],[11,"is","","Forwards to the method defined on the type `Any`.",21,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",21,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",21,null],[11,"hash","core::any","",22,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",22,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",23,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"new","","Creates a new `AtomicBool`.",23,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",23,null],[11,"store","","Stores a value into the bool.",23,null],[11,"swap","","Stores a value into the bool, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",23,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",23,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",23,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",23,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",23,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",23,null],[11,"new","","Creates a new `AtomicPtr`.",24,null],[11,"load","","Loads a value from the pointer.",24,null],[11,"store","","Stores a value into the pointer.",24,null],[11,"swap","","Stores a value into the pointer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",24,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",24,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"default","","",31,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",31,null],[11,"new","","Creates a new atomic integer.",31,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",31,null],[11,"store","","Stores a value into the atomic integer.",31,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",31,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",31,null],[11,"fetch_add","","Add to the current value, returning the previous value.",31,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",31,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",31,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",31,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",31,null],[11,"default","","",32,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",32,null],[11,"new","","Creates a new atomic integer.",32,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",32,null],[11,"store","","Stores a value into the atomic integer.",32,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",32,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",32,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",32,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",32,null],[11,"fetch_add","","Add to the current value, returning the previous value.",32,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",32,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",32,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",32,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",32,null],[11,"default","","",33,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",33,null],[11,"new","","Creates a new atomic integer.",33,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",33,null],[11,"store","","Stores a value into the atomic integer.",33,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",33,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",33,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",33,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",33,null],[11,"fetch_add","","Add to the current value, returning the previous value.",33,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",33,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",33,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",33,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",33,null],[11,"default","","",34,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",34,null],[11,"new","","Creates a new atomic integer.",34,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",34,null],[11,"store","","Stores a value into the atomic integer.",34,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",34,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",34,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",34,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",34,null],[11,"fetch_add","","Add to the current value, returning the previous value.",34,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",34,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",34,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",34,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",34,null],[11,"default","","",35,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",35,null],[11,"new","","Creates a new atomic integer.",35,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",35,null],[11,"store","","Stores a value into the atomic integer.",35,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",35,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,null],[11,"fetch_add","","Add to the current value, returning the previous value.",35,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",35,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",35,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",35,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",35,null],[11,"fmt","","",23,null],[11,"fmt","","",24,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",36,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",36,null],[11,"set","","Sets the contained value.",36,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",36,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",36,null],[11,"clone","","",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"lt","","",36,null],[11,"le","","",36,null],[11,"gt","","",36,null],[11,"ge","","",36,null],[11,"cmp","","",36,null],[11,"fmt","","",37,null],[11,"eq","","",37,null],[11,"clone","","",37,null],[11,"new","","Creates a new `RefCell` containing `value`.",38,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",38,null],[11,"borrow_state","","Query the current state of this `RefCell`",38,null],[11,"borrow","","Immutably borrows the wrapped value.",38,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",38,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",38,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",38,null],[11,"clone","","",38,null],[11,"default","","",38,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",38,null],[11,"partial_cmp","","",38,null],[11,"lt","","",38,null],[11,"le","","",38,null],[11,"gt","","",38,null],[11,"ge","","",38,null],[11,"cmp","","",38,null],[11,"deref","","",39,null],[11,"clone","","Copies a `Ref`.",39,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",39,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",39,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",40,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",40,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",40,null],[11,"deref_mut","","",40,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",41,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",41,null],[11,"get","","Gets a mutable pointer to the wrapped value.",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"last","","",42,null],[11,"fmt","","",43,null],[11,"clone","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"count","","",43,null],[11,"nth","","",43,null],[11,"last","","",43,null],[11,"fmt","","",44,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"fmt","","",45,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"fmt","core::iter::range","",46,null],[11,"clone","","",46,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",16,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",15,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",18,null],[11,"next","core::iter::range","",46,null],[11,"size_hint","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next","core::ops","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"next","","",16,null],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"next_back","","",18,null],[11,"fmt","core::iter::sources","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"next_back","","",47,null],[11,"fmt","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"len","","",48,null],[11,"clone","","",48,null],[11,"default","","",48,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"len","","",49,null],[11,"fmt","core::iter","",50,null],[11,"clone","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"fmt","","",51,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","",53,null],[11,"count","","",53,null],[11,"nth","","",53,null],[11,"find","","",53,null],[11,"last","","",53,null],[11,"size_hint","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"next_back","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"next_back","","",56,null],[11,"clone","","",57,null],[11,"fmt","","",57,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","# Overflow Behavior",58,null],[11,"size_hint","","",58,null],[11,"nth","","",58,null],[11,"count","","",58,null],[11,"next_back","","",58,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[11,"next","","",59,null],[11,"count","","",59,null],[11,"nth","","",59,null],[11,"last","","",59,null],[11,"size_hint","","",59,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",59,null],[11,"is_empty","","Checks if the iterator has finished iterating.",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"next","","",62,null],[11,"nth","","",62,null],[11,"count","","",62,null],[11,"last","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"fmt","","",63,null],[11,"clone","","",63,null],[11,"next","","",63,null],[11,"nth","","",63,null],[11,"size_hint","","",63,null],[11,"clone","","",64,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"clone","","",65,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"nth","","",66,null],[11,"last","","",66,null],[11,"count","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"next","","",67,null],[11,"size_hint","","",67,null],[11,"next_back","","",67,null],[11,"hash","core::option","",4,null],[11,"fmt","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",4,null],[11,"fmt","","",68,null],[11,"next","","",68,null],[11,"size_hint","","",68,null],[11,"next_back","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"fmt","","",70,null],[11,"clone","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",4,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",71,null],[11,"clone","","",72,null],[11,"hash","core::result","",73,null],[11,"fmt","","",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"lt","","",73,null],[11,"le","","",73,null],[11,"gt","","",73,null],[11,"ge","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"is_ok","","Returns true if the result is `Ok`",73,null],[11,"is_err","","Returns true if the result is `Err`",73,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",73,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",73,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",73,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",73,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",73,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",73,null],[11,"iter","","Returns an iterator over the possibly contained value.",73,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",73,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",73,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",73,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",73,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",73,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",73,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",73,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",73,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",73,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",73,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",73,null],[11,"fmt","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",73,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",77,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",77,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"count","","",77,null],[11,"nth","","",77,null],[11,"last","","",77,null],[11,"next_back","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",78,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"count","","",78,null],[11,"nth","","",78,null],[11,"last","","",78,null],[11,"next_back","","",78,null],[11,"fmt","","",79,null],[11,"clone","","",79,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next_back","","",79,null],[11,"fmt","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"fmt","","",82,null],[11,"fmt","","",83,null],[11,"fmt","","",84,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"next","","",84,null],[11,"size_hint","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"next","","",85,null],[11,"size_hint","","",85,null],[11,"count","","",85,null],[11,"nth","","",85,null],[11,"last","","",85,null],[11,"next_back","","",85,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"next","","",86,null],[11,"size_hint","","",86,null],[11,"count","","",86,null],[11,"nth","","",86,null],[11,"last","","",86,null],[11,"next_back","","",86,null],[11,"fmt","","",87,null],[11,"next","","",87,null],[11,"size_hint","","",87,null],[11,"count","","",87,null],[11,"nth","","",87,null],[11,"last","","",87,null],[11,"next_back","","",87,null],[11,"fmt","core::str::pattern","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"haystack","","",89,null],[11,"next","","",89,null],[11,"next_match","","",89,null],[11,"next_reject","","",89,null],[11,"next_back","","",89,null],[11,"next_match_back","","",89,null],[11,"next_reject_back","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"haystack","","",90,null],[11,"next","","",90,null],[11,"next_match","","",90,null],[11,"next_reject","","",90,null],[11,"next_back","","",90,null],[11,"next_match_back","","",90,null],[11,"next_reject_back","","",90,null],[11,"clone","","",91,null],[11,"fmt","","",91,null],[11,"haystack","","",91,null],[11,"next","","",91,null],[11,"next_match","","",91,null],[11,"next_reject","","",91,null],[11,"next_back","","",91,null],[11,"next_match_back","","",91,null],[11,"next_reject_back","","",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"haystack","","",92,null],[11,"next","","",92,null],[11,"next_match","","",92,null],[11,"next_back","","",92,null],[11,"next_match_back","","",92,null],[11,"eq","core::str","",93,null],[11,"ne","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",93,null],[11,"fmt","","",93,null],[11,"fmt","","",94,null],[11,"clone","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",94,null],[11,"fmt","","",94,null],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"next_back","","",95,null],[11,"as_str","","View the underlying data as a subslice of the original data.",95,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"next_back","","",96,null],[11,"as_str","","View the underlying data as a subslice of the original data.",96,null],[11,"fmt","","",97,null],[11,"clone","","",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"count","","",97,null],[11,"last","","",97,null],[11,"nth","","",97,null],[11,"next_back","","",97,null],[11,"len","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"next_back","","",98,null],[11,"next_back","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"next_back","","",100,null],[11,"next_back","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",104,null],[11,"next","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",105,null],[11,"next","","",105,null],[11,"clone","","",105,null],[11,"next_back","","",104,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"next","","",106,null],[11,"clone","","",106,null],[11,"fmt","","",107,null],[11,"next","","",107,null],[11,"clone","","",107,null],[11,"next_back","","",106,null],[11,"next_back","","",107,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"fmt","core::hash::sip","",111,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",111,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",111,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",111,null],[11,"finish","","",111,null],[11,"clone","","",111,null],[11,"default","","",111,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",112,null],[11,"build_hasher","","",112,null],[11,"clone","","",112,null],[11,"default","","",112,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",113,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"field","","Adds a new field to the generated tuple struct output.",115,null],[11,"finish","","Finishes output and returns any error encountered.",115,null],[11,"entry","","Adds a new entry to the set output.",116,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",116,null],[11,"finish","","Finishes output and returns any error encountered.",116,null],[11,"entry","","Adds a new entry to the list output.",117,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",117,null],[11,"finish","","Finishes output and returns any error encountered.",117,null],[11,"entry","","Adds a new entry to the map output.",118,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",118,null],[11,"finish","","Finishes output and returns any error encountered.",118,null],[11,"partial_cmp","core::fmt","",119,null],[11,"eq","","",119,null],[11,"cmp","","",119,null],[11,"hash","","",119,null],[11,"default","","",119,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"clone","","",120,null],[11,"fmt","","",120,null],[11,"fmt","","",120,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",121,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",121,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",121,null],[11,"write_fmt","","Writes some formatted information into this instance",121,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",121,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",121,null],[11,"align","","Flag indicating what form of alignment was requested",121,null],[11,"width","","Optionally specified integer width that the output should be",121,null],[11,"precision","","Optionally specified precision for numeric types",121,null],[11,"sign_plus","","Determines if the `+` flag was specified.",121,null],[11,"sign_minus","","Determines if the `-` flag was specified.",121,null],[11,"alternate","","Determines if the `#` flag was specified.",121,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",121,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",121,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",121,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",121,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",121,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",121,null],[11,"write_str","","",121,null],[11,"write_char","","",121,null],[11,"write_fmt","","",121,null],[11,"fmt","","",119,null],[11,"fmt","core::marker","",13,null],[11,"fmt","core::cell","",36,null],[11,"fmt","","",38,null],[11,"fmt","","",39,null],[11,"fmt","","",40,null],[11,"fmt","","",41,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",122,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",122,null],[11,"clone","libc","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"c_char","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"wchar_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"off_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"time64_t","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_TEXT","","",null,null],[17,"O_BINARY","","",null,null],[17,"O_NOINHERIT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null]],"paths":[[3,"stat"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"]]};
initSearch(searchIndex);
